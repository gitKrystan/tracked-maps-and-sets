"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackedWeakMap = exports.TrackedMap = void 0;
const util_1 = require("./util");
class TrackedMap extends Map {
    // **** KEY GETTERS ****
    get(key) {
        util_1.consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        util_1.consumeKey(this, key);
        return super.has(key);
    }
    // **** ALL GETTERS ****
    entries() {
        util_1.consumeCollection(this);
        return super.entries();
    }
    keys() {
        util_1.consumeCollection(this);
        return super.keys();
    }
    values() {
        util_1.consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        util_1.consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        util_1.consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    set(key, value) {
        util_1.dirtyKey(this, key);
        util_1.dirtyCollection(this);
        return super.set(key, value);
    }
    delete(key) {
        util_1.dirtyKey(this, key);
        util_1.dirtyCollection(this);
        return super.delete(key);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => util_1.dirtyKey(this, k));
        util_1.dirtyCollection(this);
        return super.clear();
    }
}
exports.TrackedMap = TrackedMap;
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedMap.prototype[Symbol.iterator];
    Object.defineProperty(TrackedMap.prototype, Symbol.iterator, {
        get() {
            util_1.consumeCollection(this);
            return originalIterator;
        }
    });
}
class TrackedWeakMap extends WeakMap {
    get(key) {
        util_1.consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        util_1.consumeKey(this, key);
        return super.has(key);
    }
    set(key, value) {
        util_1.dirtyKey(this, key);
        return super.set(key, value);
    }
    delete(key) {
        util_1.dirtyKey(this, key);
        return super.delete(key);
    }
}
exports.TrackedWeakMap = TrackedWeakMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FLZ0I7QUFFaEIsTUFBYSxVQUFxQyxTQUFRLEdBQVM7SUFDakUsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxHQUFNO1FBQ1IsaUJBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBTTtRQUNSLGlCQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLE9BQU87UUFDTCx3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSTtRQUNGLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNO1FBQ0osd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUF5QztRQUMvQyx3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTix3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixHQUFHLENBQUMsR0FBTSxFQUFFLEtBQVE7UUFDbEIsZUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQixzQkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFNO1FBQ1gsZUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQixzQkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEtBQUs7UUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLHNCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBbkVELGdDQW1FQztBQUVELElBQUksT0FBTyxNQUFNLEtBQUssU0FBUyxFQUFFO0lBQy9CLElBQUksZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFN0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7UUFDM0QsR0FBRztZQUNELHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sZ0JBQWdCLENBQUM7UUFDMUIsQ0FBQztLQUNGLENBQUMsQ0FBQztDQUNKO0FBRUQsTUFBYSxjQUF1RCxTQUFRLE9BRzNFO0lBQ0MsR0FBRyxDQUFDLEdBQU07UUFDUixpQkFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFNO1FBQ1IsaUJBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBTSxFQUFFLEtBQVE7UUFDbEIsZUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVwQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBTTtRQUNYLGVBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFcEIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQTNCRCx3Q0EyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb25zdW1lS2V5LFxuICBjb25zdW1lQ29sbGVjdGlvbixcbiAgZGlydHlLZXksXG4gIGRpcnR5Q29sbGVjdGlvblxufSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgVHJhY2tlZE1hcDxLID0gdW5rbm93biwgViA9IHVua25vd24+IGV4dGVuZHMgTWFwPEssIFY+IHtcbiAgLy8gKioqKiBLRVkgR0VUVEVSUyAqKioqXG4gIGdldChrZXk6IEspIHtcbiAgICBjb25zdW1lS2V5KHRoaXMsIGtleSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gIH1cblxuICBoYXMoa2V5OiBLKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyhrZXkpO1xuICB9XG5cbiAgLy8gKioqKiBBTEwgR0VUVEVSUyAqKioqXG4gIGVudHJpZXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuZW50cmllcygpO1xuICB9XG5cbiAga2V5cygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5rZXlzKCk7XG4gIH1cblxuICB2YWx1ZXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIudmFsdWVzKCk7XG4gIH1cblxuICBmb3JFYWNoKGZuOiAodmFsdWU6IFYsIGtleTogSywgbWFwOiB0aGlzKSA9PiB2b2lkKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICBzdXBlci5mb3JFYWNoKGZuKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNpemU7XG4gIH1cblxuICAvLyAqKioqIEtFWSBTRVRURVJTICoqKipcbiAgc2V0KGtleTogSywgdmFsdWU6IFYpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCBrZXkpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGtleSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBTRVRURVJTICoqKipcbiAgY2xlYXIoKSB7XG4gICAgc3VwZXIuZm9yRWFjaCgoX3YsIGspID0+IGRpcnR5S2V5KHRoaXMsIGspKTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuY2xlYXIoKTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gdW5kZWZpbmVkKSB7XG4gIGxldCBvcmlnaW5hbEl0ZXJhdG9yID0gVHJhY2tlZE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhY2tlZE1hcC5wcm90b3R5cGUsIFN5bWJvbC5pdGVyYXRvciwge1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSXRlcmF0b3I7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrZWRXZWFrTWFwPEsgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3QsIFYgPSB1bmtub3duPiBleHRlbmRzIFdlYWtNYXA8XG4gIEssXG4gIFZcbj4ge1xuICBnZXQoa2V5OiBLKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICB9XG5cbiAgaGFzKGtleTogSykge1xuICAgIGNvbnN1bWVLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5oYXMoa2V5KTtcbiAgfVxuXG4gIHNldChrZXk6IEssIHZhbHVlOiBWKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUoa2V5KTtcbiAgfVxufVxuIl19