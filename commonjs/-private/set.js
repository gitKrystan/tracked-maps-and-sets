"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackedWeakSet = exports.TrackedSet = void 0;
const util_1 = require("./util");
class TrackedSet extends Set {
    // **** KEY GETTERS ****
    has(value) {
        util_1.consumeKey(this, value);
        return super.has(value);
    }
    // **** ALL GETTERS ****
    entries() {
        util_1.consumeCollection(this);
        return super.entries();
    }
    keys() {
        util_1.consumeCollection(this);
        return super.keys();
    }
    values() {
        util_1.consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        util_1.consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        util_1.consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    add(value) {
        util_1.dirtyKey(this, value);
        util_1.dirtyCollection(this);
        return super.add(value);
    }
    delete(value) {
        util_1.dirtyKey(this, value);
        util_1.dirtyCollection(this);
        return super.delete(value);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => util_1.dirtyKey(this, k));
        util_1.dirtyCollection(this);
        return super.clear();
    }
}
exports.TrackedSet = TrackedSet;
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedSet.prototype[Symbol.iterator];
    Object.defineProperty(TrackedSet.prototype, Symbol.iterator, {
        get() {
            util_1.consumeCollection(this);
            return originalIterator;
        }
    });
}
class TrackedWeakSet extends WeakSet {
    has(value) {
        util_1.consumeKey(this, value);
        return super.has(value);
    }
    add(value) {
        util_1.dirtyKey(this, value);
        return super.add(value);
    }
    delete(value) {
        util_1.dirtyKey(this, value);
        return super.delete(value);
    }
}
exports.TrackedWeakSet = TrackedWeakSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL3NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FLZ0I7QUFFaEIsTUFBYSxVQUF3QixTQUFRLEdBQU07SUFDakQsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxLQUFRO1FBQ1YsaUJBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsT0FBTztRQUNMLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0Ysd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDSix3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQTZDO1FBQ25ELHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxLQUFRO1FBQ1YsZUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QixzQkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVE7UUFDYixlQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLHNCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsS0FBSztRQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsc0JBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUE3REQsZ0NBNkRDO0FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7SUFDL0IsSUFBSSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU3RCxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUMzRCxHQUFHO1lBQ0Qsd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsT0FBTyxnQkFBZ0IsQ0FBQztRQUMxQixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7QUFFRCxNQUFhLGNBQTBDLFNBQVEsT0FBVTtJQUN2RSxHQUFHLENBQUMsS0FBUTtRQUNWLGlCQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQVE7UUFDVixlQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVE7UUFDYixlQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFsQkQsd0NBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY29uc3VtZUtleSxcbiAgY29uc3VtZUNvbGxlY3Rpb24sXG4gIGRpcnR5S2V5LFxuICBkaXJ0eUNvbGxlY3Rpb25cbn0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGNsYXNzIFRyYWNrZWRTZXQ8VCA9IHVua25vd24+IGV4dGVuZHMgU2V0PFQ+IHtcbiAgLy8gKioqKiBLRVkgR0VUVEVSUyAqKioqXG4gIGhhcyh2YWx1ZTogVCkge1xuICAgIGNvbnN1bWVLZXkodGhpcywgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyh2YWx1ZSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBHRVRURVJTICoqKipcbiAgZW50cmllcygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5lbnRyaWVzKCk7XG4gIH1cblxuICBrZXlzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmtleXMoKTtcbiAgfVxuXG4gIHZhbHVlcygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci52YWx1ZXMoKTtcbiAgfVxuXG4gIGZvckVhY2goZm46ICh2YWx1ZTE6IFQsIHZhbHVlMjogVCwgbWFwOiB0aGlzKSA9PiB2b2lkKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICBzdXBlci5mb3JFYWNoKGZuKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNpemU7XG4gIH1cblxuICAvLyAqKioqIEtFWSBTRVRURVJTICoqKipcbiAgYWRkKHZhbHVlOiBUKSB7XG4gICAgZGlydHlLZXkodGhpcywgdmFsdWUpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5hZGQodmFsdWUpO1xuICB9XG5cbiAgZGVsZXRlKHZhbHVlOiBUKSB7XG4gICAgZGlydHlLZXkodGhpcywgdmFsdWUpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUodmFsdWUpO1xuICB9XG5cbiAgLy8gKioqKiBBTEwgU0VUVEVSUyAqKioqXG4gIGNsZWFyKCkge1xuICAgIHN1cGVyLmZvckVhY2goKF92LCBrKSA9PiBkaXJ0eUtleSh0aGlzLCBrKSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmNsZWFyKCk7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBTeW1ib2wgIT09IHVuZGVmaW5lZCkge1xuICBsZXQgb3JpZ2luYWxJdGVyYXRvciA9IFRyYWNrZWRTZXQucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYWNrZWRTZXQucHJvdG90eXBlLCBTeW1ib2wuaXRlcmF0b3IsIHtcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcbiAgICAgIHJldHVybiBvcmlnaW5hbEl0ZXJhdG9yO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFja2VkV2Vha1NldDxUIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0PiBleHRlbmRzIFdlYWtTZXQ8VD4ge1xuICBoYXModmFsdWU6IFQpIHtcbiAgICBjb25zdW1lS2V5KHRoaXMsIHZhbHVlKTtcblxuICAgIHJldHVybiBzdXBlci5oYXModmFsdWUpO1xuICB9XG5cbiAgYWRkKHZhbHVlOiBUKSB7XG4gICAgZGlydHlLZXkodGhpcywgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmFkZCh2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKHZhbHVlKTtcbiAgfVxufVxuIl19